
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007be  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065d  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  0000111b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <show_display>:
//	ldi r17,0xFF; cargo valor para delay0
//	ldi r18,0xFF; cargo valor para delay1
//	ldi r19,0x05; cargo valor para delay2
show_display:

call translate_num
  a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <translate_num>
ldi r17, DIS_A ; asigno a r17 el segmento de salida
  aa:	10 e1       	ldi	r17, 0x10	; 16
call sacanum
  ac:	0e 94 59 00 	call	0xb2	; 0xb2 <sacanum>
ret
  b0:	08 95       	ret

000000b2 <sacanum>:

sacanum: 
	call dato_serie
  b2:	0e 94 61 00 	call	0xc2	; 0xc2 <dato_serie>
	mov	r16, r17
  b6:	01 2f       	mov	r16, r17
	call dato_serie
  b8:	0e 94 61 00 	call	0xc2	; 0xc2 <dato_serie>
	sbi	PORTD, 4		;PD.4 a 1, es LCH el reloj del latch
  bc:	5c 9a       	sbi	0x0b, 4	; 11
	cbi	PORTD, 4		;PD.4 a 0, 
  be:	5c 98       	cbi	0x0b, 4	; 11
	ret
  c0:	08 95       	ret

000000c2 <dato_serie>:
	;Voy a sacar un byte por el 7seg
dato_serie:
	ldi	r18, 0x08 ; lo utilizo para contar 8 (8 bits)
  c2:	28 e0       	ldi	r18, 0x08	; 8

000000c4 <loop_dato1>:
loop_dato1:
	cbi	PORTD, 7		;SCLK = 0 reloj en 0
  c4:	5f 98       	cbi	0x0b, 7	; 11
	lsr	r16				;roto a la derecha r16 y el bit 0 se pone en el C
  c6:	06 95       	lsr	r16
	brcs loop_dato2		;salta si C=1
  c8:	10 f0       	brcs	.+4      	; 0xce <loop_dato2>
	cbi	PORTB, 0		;SD = 0 escribo un 0 
  ca:	28 98       	cbi	0x05, 0	; 5
	rjmp loop_dato3
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <loop_dato3>

000000ce <loop_dato2>:
loop_dato2:
	sbi	PORTB, 0		;SD = 1 escribo un 1
  ce:	28 9a       	sbi	0x05, 0	; 5

000000d0 <loop_dato3>:
loop_dato3:
	sbi	PORTD, 7		;SCLK = 1 reloj en 1
  d0:	5f 9a       	sbi	0x0b, 7	; 11
	dec	r18
  d2:	2a 95       	dec	r18
	brne loop_dato1; cuando r17 llega a 0 corta y vuelve
  d4:	b9 f7       	brne	.-18     	; 0xc4 <loop_dato1>
	ret
  d6:	08 95       	ret

000000d8 <translate_num>:

translate_num:
	cpi 16, 0
  d8:	00 30       	cpi	r16, 0x00	; 0
	breq translate_0
  da:	99 f0       	breq	.+38     	; 0x102 <translate_0>
	cpi r16, 1
  dc:	01 30       	cpi	r16, 0x01	; 1
	breq translate_1
  de:	99 f0       	breq	.+38     	; 0x106 <translate_1>
	cpi r16, 2
  e0:	02 30       	cpi	r16, 0x02	; 2
	breq translate_2
  e2:	99 f0       	breq	.+38     	; 0x10a <translate_2>
	cpi r16, 3
  e4:	03 30       	cpi	r16, 0x03	; 3
	breq translate_3
  e6:	99 f0       	breq	.+38     	; 0x10e <translate_3>
	cpi r16, 4
  e8:	04 30       	cpi	r16, 0x04	; 4
	breq translate_4
  ea:	99 f0       	breq	.+38     	; 0x112 <translate_4>
	cpi r16, 5
  ec:	05 30       	cpi	r16, 0x05	; 5
	breq translate_5
  ee:	99 f0       	breq	.+38     	; 0x116 <translate_5>
	cpi r16, 6
  f0:	06 30       	cpi	r16, 0x06	; 6
	breq translate_6
  f2:	99 f0       	breq	.+38     	; 0x11a <translate_6>
	cpi r16, 7
  f4:	07 30       	cpi	r16, 0x07	; 7
	breq translate_7
  f6:	99 f0       	breq	.+38     	; 0x11e <translate_7>
	cpi r16, 8
  f8:	08 30       	cpi	r16, 0x08	; 8
	breq translate_8
  fa:	99 f0       	breq	.+38     	; 0x122 <translate_8>
	cpi r16, 9
  fc:	09 30       	cpi	r16, 0x09	; 9
	breq translate_9
  fe:	99 f0       	breq	.+38     	; 0x126 <translate_9>
	ret
 100:	08 95       	ret

00000102 <translate_0>:

translate_0:
	ldi r16, ZERO
 102:	03 e0       	ldi	r16, 0x03	; 3
	ret
 104:	08 95       	ret

00000106 <translate_1>:

translate_1:
	ldi r16, ONE
 106:	0f e9       	ldi	r16, 0x9F	; 159
	ret
 108:	08 95       	ret

0000010a <translate_2>:

translate_2:
	ldi r16, TWO
 10a:	05 e2       	ldi	r16, 0x25	; 37
	ret
 10c:	08 95       	ret

0000010e <translate_3>:

translate_3:
	ldi r16, THREE
 10e:	0d e0       	ldi	r16, 0x0D	; 13
	ret
 110:	08 95       	ret

00000112 <translate_4>:

translate_4:
	ldi r16, FOUR
 112:	09 e9       	ldi	r16, 0x99	; 153
	ret
 114:	08 95       	ret

00000116 <translate_5>:

translate_5:
	ldi r16, FIVE
 116:	09 e4       	ldi	r16, 0x49	; 73
	ret
 118:	08 95       	ret

0000011a <translate_6>:

translate_6:
	ldi r16, SIX
 11a:	01 e4       	ldi	r16, 0x41	; 65
	ret
 11c:	08 95       	ret

0000011e <translate_7>:

translate_7:
	ldi r16, SEVEN
 11e:	0f e1       	ldi	r16, 0x1F	; 31
	ret
 120:	08 95       	ret

00000122 <translate_8>:

translate_8:
	ldi r16, EIGHT
 122:	01 e0       	ldi	r16, 0x01	; 1
	ret
 124:	08 95       	ret

00000126 <translate_9>:

translate_9:
	ldi r16, NINE
 126:	09 e0       	ldi	r16, 0x09	; 9
 128:	08 95       	ret

0000012a <ADC_init>:
 int ADC_O_1;
 int ADC_O_2;

 void ADC_init(void)
 {
	 ADMUX = 0x40;
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	 ADCSRA = 0xC7;
 130:	87 ec       	ldi	r24, 0xC7	; 199
 132:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	 ADCSRB = 0x00;
 136:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 13a:	08 95       	ret

0000013c <display_init>:
 }
 
 void display_init(void)
 {
	DDRB = 0x01;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00111101;
 140:	8d e3       	ldi	r24, 0x3D	; 61
 142:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b10010000;
 144:	80 e9       	ldi	r24, 0x90	; 144
 146:	8a b9       	out	0x0a, r24	; 10
	PORTD &= (0<PORTD4) & (0<PORTD7); 
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	08 95       	ret

00000150 <main>:
 }

 int main(void){
	 ADC_init();
 150:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_init>
	 display_init();
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <display_init>
	 while (1)
	 {
		 if ( (ADCSRA & 0x40) == 0)
 158:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15c:	86 fd       	sbrc	r24, 6
 15e:	17 c0       	rjmp	.+46     	; 0x18e <main+0x3e>
		 {
			 adcValue = (ADC * 5) / 1024;
 160:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 164:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 168:	9c 01       	movw	r18, r24
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
 176:	89 2f       	mov	r24, r25
 178:	86 95       	lsr	r24
 17a:	86 95       	lsr	r24
 17c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 180:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
			 ADCSRA |= 0x40;
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	80 83       	st	Z, r24
		 }
		 *pr16=adcValue;
 18e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 19a:	80 83       	st	Z, r24
		  show_display();
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <show_display>
	 }
 1a0:	db cf       	rjmp	.-74     	; 0x158 <main+0x8>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
