
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  00000422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000498  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000805  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066e  00000000  00000000  00000ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000419  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9e:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <show_display>:
//	ldi r17,0xFF; cargo valor para delay0
//	ldi r18,0xFF; cargo valor para delay1
//	ldi r19,0x05; cargo valor para delay2
show_display:

call translate_num
  a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <translate_num>
ldi r17, DIS_A ; asigno a r17 el segmento de salida
  aa:	10 e1       	ldi	r17, 0x10	; 16
call sacanum
  ac:	0e 94 59 00 	call	0xb2	; 0xb2 <sacanum>
ret
  b0:	08 95       	ret

000000b2 <sacanum>:

sacanum: 
	call dato_serie
  b2:	0e 94 61 00 	call	0xc2	; 0xc2 <dato_serie>
	mov	r16, r17
  b6:	01 2f       	mov	r16, r17
	call dato_serie
  b8:	0e 94 61 00 	call	0xc2	; 0xc2 <dato_serie>
	sbi	PORTD, 4		;PD.4 a 1, es LCH el reloj del latch
  bc:	5c 9a       	sbi	0x0b, 4	; 11
	cbi	PORTD, 4		;PD.4 a 0, 
  be:	5c 98       	cbi	0x0b, 4	; 11
	ret
  c0:	08 95       	ret

000000c2 <dato_serie>:
	;Voy a sacar un byte por el 7seg
dato_serie:
	ldi	r18, 0x08 ; lo utilizo para contar 8 (8 bits)
  c2:	28 e0       	ldi	r18, 0x08	; 8

000000c4 <loop_dato1>:
loop_dato1:
	cbi	PORTD, 7		;SCLK = 0 reloj en 0
  c4:	5f 98       	cbi	0x0b, 7	; 11
	lsr	r16				;roto a la derecha r16 y el bit 0 se pone en el C
  c6:	06 95       	lsr	r16
	brcs loop_dato2		;salta si C=1
  c8:	10 f0       	brcs	.+4      	; 0xce <loop_dato2>
	cbi	PORTB, 0		;SD = 0 escribo un 0 
  ca:	28 98       	cbi	0x05, 0	; 5
	rjmp loop_dato3
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <loop_dato3>

000000ce <loop_dato2>:
loop_dato2:
	sbi	PORTB, 0		;SD = 1 escribo un 1
  ce:	28 9a       	sbi	0x05, 0	; 5

000000d0 <loop_dato3>:
loop_dato3:
	sbi	PORTD, 7		;SCLK = 1 reloj en 1
  d0:	5f 9a       	sbi	0x0b, 7	; 11
	dec	r18
  d2:	2a 95       	dec	r18
	brne loop_dato1; cuando r17 llega a 0 corta y vuelve
  d4:	b9 f7       	brne	.-18     	; 0xc4 <loop_dato1>
	ret
  d6:	08 95       	ret

000000d8 <translate_num>:

translate_num:
	cpi 16, 0
  d8:	00 30       	cpi	r16, 0x00	; 0
	breq translate_0
  da:	99 f0       	breq	.+38     	; 0x102 <translate_0>
	cpi r16, 1
  dc:	01 30       	cpi	r16, 0x01	; 1
	breq translate_1
  de:	99 f0       	breq	.+38     	; 0x106 <translate_1>
	cpi r16, 2
  e0:	02 30       	cpi	r16, 0x02	; 2
	breq translate_2
  e2:	99 f0       	breq	.+38     	; 0x10a <translate_2>
	cpi r16, 3
  e4:	03 30       	cpi	r16, 0x03	; 3
	breq translate_3
  e6:	99 f0       	breq	.+38     	; 0x10e <translate_3>
	cpi r16, 4
  e8:	04 30       	cpi	r16, 0x04	; 4
	breq translate_4
  ea:	99 f0       	breq	.+38     	; 0x112 <translate_4>
	cpi r16, 5
  ec:	05 30       	cpi	r16, 0x05	; 5
	breq translate_5
  ee:	99 f0       	breq	.+38     	; 0x116 <translate_5>
	cpi r16, 6
  f0:	06 30       	cpi	r16, 0x06	; 6
	breq translate_6
  f2:	99 f0       	breq	.+38     	; 0x11a <translate_6>
	cpi r16, 7
  f4:	07 30       	cpi	r16, 0x07	; 7
	breq translate_7
  f6:	99 f0       	breq	.+38     	; 0x11e <translate_7>
	cpi r16, 8
  f8:	08 30       	cpi	r16, 0x08	; 8
	breq translate_8
  fa:	99 f0       	breq	.+38     	; 0x122 <translate_8>
	cpi r16, 9
  fc:	09 30       	cpi	r16, 0x09	; 9
	breq translate_9
  fe:	99 f0       	breq	.+38     	; 0x126 <translate_9>
	ret
 100:	08 95       	ret

00000102 <translate_0>:

translate_0:
	ldi r16, ZERO
 102:	03 e0       	ldi	r16, 0x03	; 3
	ret
 104:	08 95       	ret

00000106 <translate_1>:

translate_1:
	ldi r16, ONE
 106:	0f e9       	ldi	r16, 0x9F	; 159
	ret
 108:	08 95       	ret

0000010a <translate_2>:

translate_2:
	ldi r16, TWO
 10a:	05 e2       	ldi	r16, 0x25	; 37
	ret
 10c:	08 95       	ret

0000010e <translate_3>:

translate_3:
	ldi r16, THREE
 10e:	0d e0       	ldi	r16, 0x0D	; 13
	ret
 110:	08 95       	ret

00000112 <translate_4>:

translate_4:
	ldi r16, FOUR
 112:	09 e9       	ldi	r16, 0x99	; 153
	ret
 114:	08 95       	ret

00000116 <translate_5>:

translate_5:
	ldi r16, FIVE
 116:	09 e4       	ldi	r16, 0x49	; 73
	ret
 118:	08 95       	ret

0000011a <translate_6>:

translate_6:
	ldi r16, SIX
 11a:	01 e4       	ldi	r16, 0x41	; 65
	ret
 11c:	08 95       	ret

0000011e <translate_7>:

translate_7:
	ldi r16, SEVEN
 11e:	0f e1       	ldi	r16, 0x1F	; 31
	ret
 120:	08 95       	ret

00000122 <translate_8>:

translate_8:
	ldi r16, EIGHT
 122:	01 e0       	ldi	r16, 0x01	; 1
	ret
 124:	08 95       	ret

00000126 <translate_9>:

translate_9:
	ldi r16, NINE
 126:	09 e0       	ldi	r16, 0x09	; 9
 128:	08 95       	ret

0000012a <ADC_init>:
 int c = 0;
 int d = 0;

 void ADC_init(void)
 {
	 ADMUX = 0x40;
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	 ADCSRA = 0xC7;
 130:	87 ec       	ldi	r24, 0xC7	; 199
 132:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	 ADCSRB = 0x00;
 136:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 13a:	08 95       	ret

0000013c <display_init>:
 }
 
 void display_init(void)
 {
	DDRB = 0x01;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00111101;
 140:	8d e3       	ldi	r24, 0x3D	; 61
 142:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b10010000;
 144:	80 e9       	ldi	r24, 0x90	; 144
 146:	8a b9       	out	0x0a, r24	; 10
	PORTD &= (0<PORTD4) & (0<PORTD7); 
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	08 95       	ret

00000150 <main>:
 }

 int main(void){
	 ADC_init();
 150:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_init>
	 display_init();
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <display_init>
	 while (1)
	 {
		 if ( (ADCSRA & 0x40) == 0)
 158:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15c:	86 fd       	sbrc	r24, 6
 15e:	96 c0       	rjmp	.+300    	; 0x28c <main+0x13c>
		 {
			 voltaje = (((ADC+1)*10) * 5) / 1024;
 160:	08 e7       	ldi	r16, 0x78	; 120
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	f8 01       	movw	r30, r16
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	42 e3       	ldi	r20, 0x32	; 50
 16e:	48 9f       	mul	r20, r24
 170:	90 01       	movw	r18, r0
 172:	49 9f       	mul	r20, r25
 174:	30 0d       	add	r19, r0
 176:	11 24       	eor	r1, r1
 178:	d3 2f       	mov	r29, r19
 17a:	d6 95       	lsr	r29
 17c:	d6 95       	lsr	r29
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 93 0e 01 	sts	0x010E, r29	; 0x80010e <voltaje>
 184:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <voltaje+0x1>
			 adcValue = ((ADC+1) * 5) / 1024;
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	9c 01       	movw	r18, r24
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	89 2f       	mov	r24, r25
 19e:	86 95       	lsr	r24
 1a0:	86 95       	lsr	r24
 1a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <adcValue>
 1a6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <adcValue+0x1>
			 voltajeA =  ((ADC+1) * 5) % 100;
 1aa:	40 81       	ld	r20, Z
 1ac:	51 81       	ldd	r21, Z+1	; 0x01
 1ae:	4f 5f       	subi	r20, 0xFF	; 255
 1b0:	5f 4f       	sbci	r21, 0xFF	; 255
 1b2:	ca 01       	movw	r24, r20
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	48 0f       	add	r20, r24
 1be:	59 1f       	adc	r21, r25
 1c0:	9a 01       	movw	r18, r20
 1c2:	36 95       	lsr	r19
 1c4:	27 95       	ror	r18
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	ab e7       	ldi	r26, 0x7B	; 123
 1cc:	b4 e1       	ldi	r27, 0x14	; 20
 1ce:	0e 94 a1 01 	call	0x342	; 0x342 <__umulhisi3>
 1d2:	bc 01       	movw	r22, r24
 1d4:	76 95       	lsr	r23
 1d6:	67 95       	ror	r22
 1d8:	24 e6       	ldi	r18, 0x64	; 100
 1da:	26 9f       	mul	r18, r22
 1dc:	c0 01       	movw	r24, r0
 1de:	27 9f       	mul	r18, r23
 1e0:	90 0d       	add	r25, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	ba 01       	movw	r22, r20
 1e6:	68 1b       	sub	r22, r24
 1e8:	79 0b       	sbc	r23, r25
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__floatunsisf>
 1f2:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <voltajeA>
 1f6:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <voltajeA+0x1>
 1fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <voltajeA+0x2>
 1fe:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <voltajeA+0x3>
			 a = ((ADC+1) * 5) / 100;
 202:	f8 01       	movw	r30, r16
 204:	20 81       	ld	r18, Z
 206:	31 81       	ldd	r19, Z+1	; 0x01
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	c9 01       	movw	r24, r18
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	28 0f       	add	r18, r24
 218:	39 1f       	adc	r19, r25
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	ab e7       	ldi	r26, 0x7B	; 123
 224:	b4 e1       	ldi	r27, 0x14	; 20
 226:	0e 94 a1 01 	call	0x342	; 0x342 <__umulhisi3>
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <a+0x1>
 232:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <a>
			 b = voltaje % 1000 / 100;
 236:	8d 2f       	mov	r24, r29
 238:	9c 2f       	mov	r25, r28
 23a:	68 ee       	ldi	r22, 0xE8	; 232
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 242:	24 e6       	ldi	r18, 0x64	; 100
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 24c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <b+0x1>
 250:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <b>
			 c = voltaje % 100 / 10;
 254:	8d 2f       	mov	r24, r29
 256:	9c 2f       	mov	r25, r28
 258:	b9 01       	movw	r22, r18
 25a:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 25e:	2a e0       	ldi	r18, 0x0A	; 10
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	b9 01       	movw	r22, r18
 264:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 268:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <c+0x1>
 26c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <c>
			 d = voltaje % 10;
 270:	8d 2f       	mov	r24, r29
 272:	9c 2f       	mov	r25, r28
 274:	b9 01       	movw	r22, r18
 276:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 27a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 27e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			 ADCSRA |= 0x40;
 282:	ea e7       	ldi	r30, 0x7A	; 122
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	80 83       	st	Z, r24
		 }
		 *pr16=adcValue;
 28c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 290:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 294:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adcValue>
 298:	80 83       	st	Z, r24
		  show_display();
 29a:	0e 94 53 00 	call	0xa6	; 0xa6 <show_display>
	 }
 29e:	5c cf       	rjmp	.-328    	; 0x158 <main+0x8>

000002a0 <__floatunsisf>:
 2a0:	e8 94       	clt
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <__floatsisf+0x12>

000002a4 <__floatsisf>:
 2a4:	97 fb       	bst	r25, 7
 2a6:	3e f4       	brtc	.+14     	; 0x2b6 <__floatsisf+0x12>
 2a8:	90 95       	com	r25
 2aa:	80 95       	com	r24
 2ac:	70 95       	com	r23
 2ae:	61 95       	neg	r22
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8f 4f       	sbci	r24, 0xFF	; 255
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	99 23       	and	r25, r25
 2b8:	a9 f0       	breq	.+42     	; 0x2e4 <__floatsisf+0x40>
 2ba:	f9 2f       	mov	r31, r25
 2bc:	96 e9       	ldi	r25, 0x96	; 150
 2be:	bb 27       	eor	r27, r27
 2c0:	93 95       	inc	r25
 2c2:	f6 95       	lsr	r31
 2c4:	87 95       	ror	r24
 2c6:	77 95       	ror	r23
 2c8:	67 95       	ror	r22
 2ca:	b7 95       	ror	r27
 2cc:	f1 11       	cpse	r31, r1
 2ce:	f8 cf       	rjmp	.-16     	; 0x2c0 <__floatsisf+0x1c>
 2d0:	fa f4       	brpl	.+62     	; 0x310 <__floatsisf+0x6c>
 2d2:	bb 0f       	add	r27, r27
 2d4:	11 f4       	brne	.+4      	; 0x2da <__floatsisf+0x36>
 2d6:	60 ff       	sbrs	r22, 0
 2d8:	1b c0       	rjmp	.+54     	; 0x310 <__floatsisf+0x6c>
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	8f 4f       	sbci	r24, 0xFF	; 255
 2e0:	9f 4f       	sbci	r25, 0xFF	; 255
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <__floatsisf+0x6c>
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <__floatsisf+0x48>
 2e8:	96 e9       	ldi	r25, 0x96	; 150
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <__floatsisf+0x6a>
 2ec:	77 23       	and	r23, r23
 2ee:	21 f0       	breq	.+8      	; 0x2f8 <__floatsisf+0x54>
 2f0:	9e e8       	ldi	r25, 0x8E	; 142
 2f2:	87 2f       	mov	r24, r23
 2f4:	76 2f       	mov	r23, r22
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <__floatsisf+0x5e>
 2f8:	66 23       	and	r22, r22
 2fa:	71 f0       	breq	.+28     	; 0x318 <__floatsisf+0x74>
 2fc:	96 e8       	ldi	r25, 0x86	; 134
 2fe:	86 2f       	mov	r24, r22
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	2a f0       	brmi	.+10     	; 0x310 <__floatsisf+0x6c>
 306:	9a 95       	dec	r25
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	da f7       	brpl	.-10     	; 0x306 <__floatsisf+0x62>
 310:	88 0f       	add	r24, r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	97 f9       	bld	r25, 7
 318:	08 95       	ret

0000031a <__divmodhi4>:
 31a:	97 fb       	bst	r25, 7
 31c:	07 2e       	mov	r0, r23
 31e:	16 f4       	brtc	.+4      	; 0x324 <__divmodhi4+0xa>
 320:	00 94       	com	r0
 322:	07 d0       	rcall	.+14     	; 0x332 <__divmodhi4_neg1>
 324:	77 fd       	sbrc	r23, 7
 326:	09 d0       	rcall	.+18     	; 0x33a <__divmodhi4_neg2>
 328:	0e 94 b0 01 	call	0x360	; 0x360 <__udivmodhi4>
 32c:	07 fc       	sbrc	r0, 7
 32e:	05 d0       	rcall	.+10     	; 0x33a <__divmodhi4_neg2>
 330:	3e f4       	brtc	.+14     	; 0x340 <__divmodhi4_exit>

00000332 <__divmodhi4_neg1>:
 332:	90 95       	com	r25
 334:	81 95       	neg	r24
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	08 95       	ret

0000033a <__divmodhi4_neg2>:
 33a:	70 95       	com	r23
 33c:	61 95       	neg	r22
 33e:	7f 4f       	sbci	r23, 0xFF	; 255

00000340 <__divmodhi4_exit>:
 340:	08 95       	ret

00000342 <__umulhisi3>:
 342:	a2 9f       	mul	r26, r18
 344:	b0 01       	movw	r22, r0
 346:	b3 9f       	mul	r27, r19
 348:	c0 01       	movw	r24, r0
 34a:	a3 9f       	mul	r26, r19
 34c:	70 0d       	add	r23, r0
 34e:	81 1d       	adc	r24, r1
 350:	11 24       	eor	r1, r1
 352:	91 1d       	adc	r25, r1
 354:	b2 9f       	mul	r27, r18
 356:	70 0d       	add	r23, r0
 358:	81 1d       	adc	r24, r1
 35a:	11 24       	eor	r1, r1
 35c:	91 1d       	adc	r25, r1
 35e:	08 95       	ret

00000360 <__udivmodhi4>:
 360:	aa 1b       	sub	r26, r26
 362:	bb 1b       	sub	r27, r27
 364:	51 e1       	ldi	r21, 0x11	; 17
 366:	07 c0       	rjmp	.+14     	; 0x376 <__udivmodhi4_ep>

00000368 <__udivmodhi4_loop>:
 368:	aa 1f       	adc	r26, r26
 36a:	bb 1f       	adc	r27, r27
 36c:	a6 17       	cp	r26, r22
 36e:	b7 07       	cpc	r27, r23
 370:	10 f0       	brcs	.+4      	; 0x376 <__udivmodhi4_ep>
 372:	a6 1b       	sub	r26, r22
 374:	b7 0b       	sbc	r27, r23

00000376 <__udivmodhi4_ep>:
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	5a 95       	dec	r21
 37c:	a9 f7       	brne	.-22     	; 0x368 <__udivmodhi4_loop>
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	bc 01       	movw	r22, r24
 384:	cd 01       	movw	r24, r26
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
